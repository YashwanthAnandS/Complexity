1.Loop

  for(int i=1;i<=n;i++){  //O(n)
        x=y+z;            //O(1)
  }

  Answer : O(n)

2.Nested Loop

   for(int i=1;i<=n;i++){     //O(n)
      for(int j=1;j<=n;j++){  //O(n)
            x=y+z;            //O(1)
      }
   }
   Solution : O(n)*(O(n) +O(1))=O(n)*O(n)
   Answer   : O(n^2)

3.Sequential Statements

  *)a=a+b;                   //O(1)

  *)for(int i=1;i<=n;i++){   //O(n)
        x=y+z;               //O(1)
   }

  *)for(int j=1;j<=n;j++){   //O(n)
            c=d+e;           //O(1)
       }
  Solution : O(1) + O(n)*O(1) + O(n)*O(1)=1+1*O(n)+1*O(n)=O(n)(1+1)
  Answer : O(n)

4.If-else statements

  if(condition){
  // Take for example we have for loop with O(n) complexity
  }else{
  // Take for example we have for loop with O(n^2) complexity
  }

  Answer : O(n^2)

4.The time complexity of a single instruction is O(1)

  Example: int a = b + c;

5.The time complexity of a function is O(1) if it contains only simple instructions without any loops, recursion and it does not call to any function whose time complexity is not constant.

  Example:
  // returns the minimum of two numbers
  public static int minimum_of(int number1, int number2) {
      int minimum;
      if (number1 > number2)
          minimum = number2;
      else
          minimum = number1;

      return minimum;
  }

6.If there is a loop which iterates some constant number of times, then the time complexity of that loop is O(1).

      Example:

  //c here is some constant
  for (int i = 0; i < c; i++) {
      //Some instructions with time complexity O(1)
  }

7.The loop given below has time complexity O(n) since the loop variable is incremented by constant amounts from 1 to n or decremented by constant amounts from n to 1, i.e., the innermost instructions get executed n times.

       Example:

  //incremented
  for (int i = 1; i <= n; i += 1) {
      //Some instructions with time complexity O(1)
  }

  //decremented
  for (int i = n; i >= 1 ; i -= 1) {
      //Some instructions with time complexity O(1)
  }

8.The time complexity of the below loop is O (n^2)

  Example 1:
  for (int i = 1; i <= n; i += 1) {
      for (int j = 1; j <= n; j += 1) {
          //Some instructions with time complexity O(1)
      }
  }
  In the above instruction set, the inner loop gets executed n times, and the outer loop also gets executed n times hence the innermost instruction gets executed
  n^2 times. Therefore, the time complexity of the program is
  O(n^2)

  Example 2:
  for (int i = n; i > 0; i -= 1) {
      for (int j = i + 1; j <= n; j += 1) {
          //Some instructions with time complexity O(1)
      }
  }

9.The time complexity of the below loops is O(log n)

  Example 1:
  for (int i = 1; i <= n; i *= 2) {
      //Some instructions with time complexity O(1)
  }

10.The time complexity of the below loop is O(log log n)

  Example 1:

   // pow(i, c) is a function which calculates ic, c>0
   for (int i = 2; i <= n; i = pow(i, c)) {
       //Some instructions with time complexity O(1)
   }

  Example 2:

  //sqrt can be replaced by any other constant root
  for (int i = n; i > 0; i = sqrt(i)) {
      //Some instructions with time complexity O(1)
  }

11.The time complexity of the below function is O(n!)

  Example:
  void timenfact ( int n){
      for (int i = 0; i < n; i++) {
          timenfact(n - 1);
      }
  }

12.public void function(int n){
      for(int i = 0 ;i < n; i++){
         int j = 0;
         while(j < n){
               j++;
         }
      }
   }

   Answer : O(n^2)

13.public void function(int n) {
      for(int i = 0; i < n*n; i++){
          for(int j = 0; j < n; j++){
              System.out.println("Hello");
          }
      }
   }

    Answer : O(n^3)

14.public void findDuplicates(int[] id) {
           System.out.println("Duplicate student id : ");
           for (int i = 0; i < id.length; i++) {
               for (int j = i+1; j < id.length; j++) {
                   if (id[i] == id[j]) {
                       System.out.print(id[i] + " ");
                       break;
                   }
               }
           }
       }

    Answer : O(n^2)

15.public void findDuplicates(int[] id) {
           System.out.println("Duplicate data : ");
           int count[] = new int[10000];
           for (int i = 0; i < id.length; i++) {
               count[id[i]]++;
               if (count[id[i]] == 2)
                   System.out.print(id[i] + " ");
           }
           System.out.println();
       }

     Answer :O(n)

16.public void function(int n){
       for(int i = 1; i <= n; i++){
           for(int j = 0; j < i; j++){
               System.out.println("Hello");
           }
       }
   }

  Answer : O(n^2)

17.public void function(int n){
       for(int i=0; i < n; i++){
           for(int j=2; j < n; j* =2){
               System.out.println("Hello");
           }
       }
   }

   Answer : O(n log (n))

18. public void function(int n) {
        int j = 1;
        while (j < n){
             j = j*2;
       }
    }

    Answer : O(log n)

19.public void function(int n){
      for(int i = n; i > 0; i/ = 3){
          for(int j = 0; j < i; j++){
              System.out.println("Hello");
          }
      }
   }

   Answer : O(n)

  Order of Time Complexity with Best to Worst Case

  O(1)<O(log n)<O(n)<O(nlogn)<O(n^c)<O(2^n)<O(n!)


  	                            Time Complexity
  Algorithm	        Best 	        Average         Worst
  Selection Sort	O(n^2)	        O(n^2)	        O(n^2)
  Bubble Sort	    O(n)	        O(n^2)	        O(n^2)
  Insertion Sort	O(n)	        O(n^2)	        O(n^2)
  Heap Sort 	    O(n log (n))	O(n log (n))	O(n log (n))
  Quick Sort	    O(n log (n))	O(n log (n))	O(n^2)
  Merge Sort	    O(n log (n))	O(n log (n))	O(n log (n))
  Bucket Sort	    O(n + k)	    O(n + k)	    O(n^2)
  Radix Sort	    O(nk)	        O(nk)	        O(nk)
